{* utils *}
#lib
def floor(x)
#lib 
def ceil(x)

def fpart(x) = (x - ceil(x))/(x < 0) ; (x - floor(x))

def round(x) = floor(x)/(fpart(x) < 0.5) ; ceil(x)

def abs(x) = x/(x>0) ; -x

def sgn(x) = 1/(x>0) ; -1

def isInt(x) = floor(x) == x

def sqrt(x) = x^0.5

con undef = 0/0


{* exponents *}
#lib
def exp(x)

con e = exp(1)

def ln(x) = 
    #lib
    def loge(x)
    -> loge(x)/(x>0)

def log(b,x) = 
    #lib
    def loge(x)
    -> loge(x)/loge(b)/(x>0)

def gamma = 0.5772156649015329


{* binary operator chains *}

def SUM[f<0 1>](i,N) = ( 0/(i>N) ; f(i) + SUM[f](i+1, N) ) / isInt(i)

def PROD[f<0 1>](i,N) = ( 1/(i>N) ; f(i) * PROD[f](i+1, N) ) / isInt(i)

def CONJ[f<0 1>](i,N) = ( 1/(i>N) ; f(i) & CONJ[f](i+1, N) ) / isInt(i)

def DISJ[f<0 1>](i,N) = ( 0/(i>N) ; f(i) | DISJ[f](i+1, N) ) / isInt(i)


{* trigonometry *}

con pi = 3.141592653589793

con tau = 6.283185307179586
#lib
def sin(x)
#lib
def cos(x)
#lib
def tan(x)

def cot(x) = 1/tan(x)

def sec(x) = 1/cos(x)

def csc(x) = 1/sin(x)

def rad(x) = tau/360 x

def deg(x) = 360/tau x

def arcsin(x) = 
    #lib
    def asin(x)
    -> asin(x) / (-1 <= x & x <= 1)

def arccos(x) = 
    #lib
    def acos(x)
    -> acos(x) / (-1 <= x & x <= 1)

def arctan(x) = 
    #lib
    def atan(x)
    -> atan(x)

def arccot(x) = tau/4/(x == 0) ; arctan(1/x)

def arcsec(x) = arccos(1/x) / (x != 0)

def arccsc(x) = arcsin(1/x) / (x != 0)


{* hyperbolic trigonometric *}

def sinh(x) = (exp(x) - exp(-x)) / 2

def cosh(x) = (exp(x) + exp(-x)) / 2

def tanh(x) = (exp(x) - exp(-x)) / (exp(x) + exp(-x))

def coth(x) = (exp(x) + exp(-x)) / (exp(x) - exp(-x))

def sech(x) = 2 / (exp(x) + exp(-x))

def csch(x) = 2 / (exp(x) - exp(-x))

def arcsinh(x) = ln(x + sqrt(x^2 + 1)) 

def arccosh(x) = ln(x + sqrt(x^2 - 1))

def arctanh(x) = (1/2) ln((1 + x) / (1 - x))

def arccoth(x) = (1/2) ln((x + 1) / (x - 1))

def arcsech(x) = ln((1 + sqrt(1 - x^2)) / x)

def arccsch(x) = ln((1 + sqrt(1 + x^2)) / x)

